// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: rating_service/rating_service.proto

package rating

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RatingService_GetHostRatingById_FullMethodName               = "/rating.RatingService/GetHostRatingById"
	RatingService_GetAllRatingsForHost_FullMethodName            = "/rating.RatingService/GetAllRatingsForHost"
	RatingService_GetAverageScoreForHost_FullMethodName          = "/rating.RatingService/GetAverageScoreForHost"
	RatingService_CreateHostRating_FullMethodName                = "/rating.RatingService/CreateHostRating"
	RatingService_UpdateHostRating_FullMethodName                = "/rating.RatingService/UpdateHostRating"
	RatingService_DeleteHostRating_FullMethodName                = "/rating.RatingService/DeleteHostRating"
	RatingService_GetAccommodationRatingById_FullMethodName      = "/rating.RatingService/GetAccommodationRatingById"
	RatingService_GetAllRatingsForAccommodation_FullMethodName   = "/rating.RatingService/GetAllRatingsForAccommodation"
	RatingService_GetAverageScoreForAccommodation_FullMethodName = "/rating.RatingService/GetAverageScoreForAccommodation"
	RatingService_CreateAccommodationRating_FullMethodName       = "/rating.RatingService/CreateAccommodationRating"
	RatingService_UpdateAccommodationRating_FullMethodName       = "/rating.RatingService/UpdateAccommodationRating"
	RatingService_DeleteAccommodationRating_FullMethodName       = "/rating.RatingService/DeleteAccommodationRating"
)

// RatingServiceClient is the client API for RatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingServiceClient interface {
	GetHostRatingById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*HostRating, error)
	GetAllRatingsForHost(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAllRatingsForHostResponse, error)
	GetAverageScoreForHost(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAverageScoreForHostResponse, error)
	CreateHostRating(ctx context.Context, in *CreateHostRatingRequest, opts ...grpc.CallOption) (*HostRating, error)
	UpdateHostRating(ctx context.Context, in *HostRating, opts ...grpc.CallOption) (*HostRating, error)
	DeleteHostRating(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	GetAccommodationRatingById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*AccommodationRating, error)
	GetAllRatingsForAccommodation(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAllRatingsForAccommodationResponse, error)
	GetAverageScoreForAccommodation(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAverageScoreForAccommodationResponse, error)
	CreateAccommodationRating(ctx context.Context, in *CreateAccommodationRatingRequest, opts ...grpc.CallOption) (*AccommodationRating, error)
	UpdateAccommodationRating(ctx context.Context, in *AccommodationRating, opts ...grpc.CallOption) (*AccommodationRating, error)
	DeleteAccommodationRating(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
}

type ratingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingServiceClient(cc grpc.ClientConnInterface) RatingServiceClient {
	return &ratingServiceClient{cc}
}

func (c *ratingServiceClient) GetHostRatingById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*HostRating, error) {
	out := new(HostRating)
	err := c.cc.Invoke(ctx, RatingService_GetHostRatingById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAllRatingsForHost(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAllRatingsForHostResponse, error) {
	out := new(GetAllRatingsForHostResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAllRatingsForHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAverageScoreForHost(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAverageScoreForHostResponse, error) {
	out := new(GetAverageScoreForHostResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAverageScoreForHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) CreateHostRating(ctx context.Context, in *CreateHostRatingRequest, opts ...grpc.CallOption) (*HostRating, error) {
	out := new(HostRating)
	err := c.cc.Invoke(ctx, RatingService_CreateHostRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) UpdateHostRating(ctx context.Context, in *HostRating, opts ...grpc.CallOption) (*HostRating, error) {
	out := new(HostRating)
	err := c.cc.Invoke(ctx, RatingService_UpdateHostRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteHostRating(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, RatingService_DeleteHostRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAccommodationRatingById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*AccommodationRating, error) {
	out := new(AccommodationRating)
	err := c.cc.Invoke(ctx, RatingService_GetAccommodationRatingById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAllRatingsForAccommodation(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAllRatingsForAccommodationResponse, error) {
	out := new(GetAllRatingsForAccommodationResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAllRatingsForAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAverageScoreForAccommodation(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAverageScoreForAccommodationResponse, error) {
	out := new(GetAverageScoreForAccommodationResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAverageScoreForAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) CreateAccommodationRating(ctx context.Context, in *CreateAccommodationRatingRequest, opts ...grpc.CallOption) (*AccommodationRating, error) {
	out := new(AccommodationRating)
	err := c.cc.Invoke(ctx, RatingService_CreateAccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) UpdateAccommodationRating(ctx context.Context, in *AccommodationRating, opts ...grpc.CallOption) (*AccommodationRating, error) {
	out := new(AccommodationRating)
	err := c.cc.Invoke(ctx, RatingService_UpdateAccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteAccommodationRating(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, RatingService_DeleteAccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServiceServer is the server API for RatingService service.
// All implementations must embed UnimplementedRatingServiceServer
// for forward compatibility
type RatingServiceServer interface {
	GetHostRatingById(context.Context, *IdRequest) (*HostRating, error)
	GetAllRatingsForHost(context.Context, *IdRequest) (*GetAllRatingsForHostResponse, error)
	GetAverageScoreForHost(context.Context, *IdRequest) (*GetAverageScoreForHostResponse, error)
	CreateHostRating(context.Context, *CreateHostRatingRequest) (*HostRating, error)
	UpdateHostRating(context.Context, *HostRating) (*HostRating, error)
	DeleteHostRating(context.Context, *DeleteRequest) (*DeletedResponse, error)
	GetAccommodationRatingById(context.Context, *IdRequest) (*AccommodationRating, error)
	GetAllRatingsForAccommodation(context.Context, *IdRequest) (*GetAllRatingsForAccommodationResponse, error)
	GetAverageScoreForAccommodation(context.Context, *IdRequest) (*GetAverageScoreForAccommodationResponse, error)
	CreateAccommodationRating(context.Context, *CreateAccommodationRatingRequest) (*AccommodationRating, error)
	UpdateAccommodationRating(context.Context, *AccommodationRating) (*AccommodationRating, error)
	DeleteAccommodationRating(context.Context, *DeleteRequest) (*DeletedResponse, error)
	mustEmbedUnimplementedRatingServiceServer()
}

// UnimplementedRatingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRatingServiceServer struct {
}

func (UnimplementedRatingServiceServer) GetHostRatingById(context.Context, *IdRequest) (*HostRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostRatingById not implemented")
}
func (UnimplementedRatingServiceServer) GetAllRatingsForHost(context.Context, *IdRequest) (*GetAllRatingsForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRatingsForHost not implemented")
}
func (UnimplementedRatingServiceServer) GetAverageScoreForHost(context.Context, *IdRequest) (*GetAverageScoreForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageScoreForHost not implemented")
}
func (UnimplementedRatingServiceServer) CreateHostRating(context.Context, *CreateHostRatingRequest) (*HostRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostRating not implemented")
}
func (UnimplementedRatingServiceServer) UpdateHostRating(context.Context, *HostRating) (*HostRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostRating not implemented")
}
func (UnimplementedRatingServiceServer) DeleteHostRating(context.Context, *DeleteRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostRating not implemented")
}
func (UnimplementedRatingServiceServer) GetAccommodationRatingById(context.Context, *IdRequest) (*AccommodationRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccommodationRatingById not implemented")
}
func (UnimplementedRatingServiceServer) GetAllRatingsForAccommodation(context.Context, *IdRequest) (*GetAllRatingsForAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRatingsForAccommodation not implemented")
}
func (UnimplementedRatingServiceServer) GetAverageScoreForAccommodation(context.Context, *IdRequest) (*GetAverageScoreForAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageScoreForAccommodation not implemented")
}
func (UnimplementedRatingServiceServer) CreateAccommodationRating(context.Context, *CreateAccommodationRatingRequest) (*AccommodationRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) UpdateAccommodationRating(context.Context, *AccommodationRating) (*AccommodationRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) DeleteAccommodationRating(context.Context, *DeleteRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) mustEmbedUnimplementedRatingServiceServer() {}

// UnsafeRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServiceServer will
// result in compilation errors.
type UnsafeRatingServiceServer interface {
	mustEmbedUnimplementedRatingServiceServer()
}

func RegisterRatingServiceServer(s grpc.ServiceRegistrar, srv RatingServiceServer) {
	s.RegisterService(&RatingService_ServiceDesc, srv)
}

func _RatingService_GetHostRatingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetHostRatingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetHostRatingById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetHostRatingById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAllRatingsForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAllRatingsForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAllRatingsForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAllRatingsForHost(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAverageScoreForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAverageScoreForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAverageScoreForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAverageScoreForHost(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_CreateHostRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).CreateHostRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_CreateHostRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).CreateHostRating(ctx, req.(*CreateHostRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_UpdateHostRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).UpdateHostRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_UpdateHostRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).UpdateHostRating(ctx, req.(*HostRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteHostRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteHostRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_DeleteHostRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteHostRating(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAccommodationRatingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAccommodationRatingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAccommodationRatingById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAccommodationRatingById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAllRatingsForAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAllRatingsForAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAllRatingsForAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAllRatingsForAccommodation(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAverageScoreForAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAverageScoreForAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAverageScoreForAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAverageScoreForAccommodation(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_CreateAccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccommodationRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).CreateAccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_CreateAccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).CreateAccommodationRating(ctx, req.(*CreateAccommodationRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_UpdateAccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccommodationRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).UpdateAccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_UpdateAccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).UpdateAccommodationRating(ctx, req.(*AccommodationRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteAccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteAccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_DeleteAccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteAccommodationRating(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RatingService_ServiceDesc is the grpc.ServiceDesc for RatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rating.RatingService",
	HandlerType: (*RatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostRatingById",
			Handler:    _RatingService_GetHostRatingById_Handler,
		},
		{
			MethodName: "GetAllRatingsForHost",
			Handler:    _RatingService_GetAllRatingsForHost_Handler,
		},
		{
			MethodName: "GetAverageScoreForHost",
			Handler:    _RatingService_GetAverageScoreForHost_Handler,
		},
		{
			MethodName: "CreateHostRating",
			Handler:    _RatingService_CreateHostRating_Handler,
		},
		{
			MethodName: "UpdateHostRating",
			Handler:    _RatingService_UpdateHostRating_Handler,
		},
		{
			MethodName: "DeleteHostRating",
			Handler:    _RatingService_DeleteHostRating_Handler,
		},
		{
			MethodName: "GetAccommodationRatingById",
			Handler:    _RatingService_GetAccommodationRatingById_Handler,
		},
		{
			MethodName: "GetAllRatingsForAccommodation",
			Handler:    _RatingService_GetAllRatingsForAccommodation_Handler,
		},
		{
			MethodName: "GetAverageScoreForAccommodation",
			Handler:    _RatingService_GetAverageScoreForAccommodation_Handler,
		},
		{
			MethodName: "CreateAccommodationRating",
			Handler:    _RatingService_CreateAccommodationRating_Handler,
		},
		{
			MethodName: "UpdateAccommodationRating",
			Handler:    _RatingService_UpdateAccommodationRating_Handler,
		},
		{
			MethodName: "DeleteAccommodationRating",
			Handler:    _RatingService_DeleteAccommodationRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rating_service/rating_service.proto",
}
