// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: notification_service/notification_service.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotificationService_GetAllNotificationsByUserIdAndType_FullMethodName   = "/notification.NotificationService/GetAllNotificationsByUserIdAndType"
	NotificationService_AcknowledgeNotification_FullMethodName              = "/notification.NotificationService/AcknowledgeNotification"
	NotificationService_InsertNotification_FullMethodName                   = "/notification.NotificationService/InsertNotification"
	NotificationService_GetSelectedNotificationTypesByUserId_FullMethodName = "/notification.NotificationService/GetSelectedNotificationTypesByUserId"
	NotificationService_InsertSelectedNotificationTypes_FullMethodName      = "/notification.NotificationService/InsertSelectedNotificationTypes"
	NotificationService_UpdateSelectedNotificationTypes_FullMethodName      = "/notification.NotificationService/UpdateSelectedNotificationTypes"
	NotificationService_DeleteSelectedNotificationTypes_FullMethodName      = "/notification.NotificationService/DeleteSelectedNotificationTypes"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	GetAllNotificationsByUserIdAndType(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*GetAllNotificationsByUserIdAndTypeResponse, error)
	AcknowledgeNotification(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Notification, error)
	InsertNotification(ctx context.Context, in *CreateNotification, opts ...grpc.CallOption) (*Notification, error)
	GetSelectedNotificationTypesByUserId(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*SelectedNotificationTypes, error)
	InsertSelectedNotificationTypes(ctx context.Context, in *SelectedNotificationTypes, opts ...grpc.CallOption) (*MessageResponse, error)
	UpdateSelectedNotificationTypes(ctx context.Context, in *SelectedNotificationTypes, opts ...grpc.CallOption) (*SelectedNotificationTypes, error)
	DeleteSelectedNotificationTypes(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) GetAllNotificationsByUserIdAndType(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*GetAllNotificationsByUserIdAndTypeResponse, error) {
	out := new(GetAllNotificationsByUserIdAndTypeResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetAllNotificationsByUserIdAndType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) AcknowledgeNotification(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, NotificationService_AcknowledgeNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) InsertNotification(ctx context.Context, in *CreateNotification, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, NotificationService_InsertNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetSelectedNotificationTypesByUserId(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*SelectedNotificationTypes, error) {
	out := new(SelectedNotificationTypes)
	err := c.cc.Invoke(ctx, NotificationService_GetSelectedNotificationTypesByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) InsertSelectedNotificationTypes(ctx context.Context, in *SelectedNotificationTypes, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, NotificationService_InsertSelectedNotificationTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateSelectedNotificationTypes(ctx context.Context, in *SelectedNotificationTypes, opts ...grpc.CallOption) (*SelectedNotificationTypes, error) {
	out := new(SelectedNotificationTypes)
	err := c.cc.Invoke(ctx, NotificationService_UpdateSelectedNotificationTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) DeleteSelectedNotificationTypes(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, NotificationService_DeleteSelectedNotificationTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	GetAllNotificationsByUserIdAndType(context.Context, *UserIdRequest) (*GetAllNotificationsByUserIdAndTypeResponse, error)
	AcknowledgeNotification(context.Context, *IdRequest) (*Notification, error)
	InsertNotification(context.Context, *CreateNotification) (*Notification, error)
	GetSelectedNotificationTypesByUserId(context.Context, *UserIdRequest) (*SelectedNotificationTypes, error)
	InsertSelectedNotificationTypes(context.Context, *SelectedNotificationTypes) (*MessageResponse, error)
	UpdateSelectedNotificationTypes(context.Context, *SelectedNotificationTypes) (*SelectedNotificationTypes, error)
	DeleteSelectedNotificationTypes(context.Context, *UserIdRequest) (*MessageResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) GetAllNotificationsByUserIdAndType(context.Context, *UserIdRequest) (*GetAllNotificationsByUserIdAndTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotificationsByUserIdAndType not implemented")
}
func (UnimplementedNotificationServiceServer) AcknowledgeNotification(context.Context, *IdRequest) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeNotification not implemented")
}
func (UnimplementedNotificationServiceServer) InsertNotification(context.Context, *CreateNotification) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertNotification not implemented")
}
func (UnimplementedNotificationServiceServer) GetSelectedNotificationTypesByUserId(context.Context, *UserIdRequest) (*SelectedNotificationTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelectedNotificationTypesByUserId not implemented")
}
func (UnimplementedNotificationServiceServer) InsertSelectedNotificationTypes(context.Context, *SelectedNotificationTypes) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSelectedNotificationTypes not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateSelectedNotificationTypes(context.Context, *SelectedNotificationTypes) (*SelectedNotificationTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSelectedNotificationTypes not implemented")
}
func (UnimplementedNotificationServiceServer) DeleteSelectedNotificationTypes(context.Context, *UserIdRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSelectedNotificationTypes not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_GetAllNotificationsByUserIdAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetAllNotificationsByUserIdAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetAllNotificationsByUserIdAndType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetAllNotificationsByUserIdAndType(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_AcknowledgeNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).AcknowledgeNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_AcknowledgeNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).AcknowledgeNotification(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_InsertNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).InsertNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_InsertNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).InsertNotification(ctx, req.(*CreateNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetSelectedNotificationTypesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetSelectedNotificationTypesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetSelectedNotificationTypesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetSelectedNotificationTypesByUserId(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_InsertSelectedNotificationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectedNotificationTypes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).InsertSelectedNotificationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_InsertSelectedNotificationTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).InsertSelectedNotificationTypes(ctx, req.(*SelectedNotificationTypes))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateSelectedNotificationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectedNotificationTypes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateSelectedNotificationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateSelectedNotificationTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateSelectedNotificationTypes(ctx, req.(*SelectedNotificationTypes))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_DeleteSelectedNotificationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).DeleteSelectedNotificationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_DeleteSelectedNotificationTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).DeleteSelectedNotificationTypes(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllNotificationsByUserIdAndType",
			Handler:    _NotificationService_GetAllNotificationsByUserIdAndType_Handler,
		},
		{
			MethodName: "AcknowledgeNotification",
			Handler:    _NotificationService_AcknowledgeNotification_Handler,
		},
		{
			MethodName: "InsertNotification",
			Handler:    _NotificationService_InsertNotification_Handler,
		},
		{
			MethodName: "GetSelectedNotificationTypesByUserId",
			Handler:    _NotificationService_GetSelectedNotificationTypesByUserId_Handler,
		},
		{
			MethodName: "InsertSelectedNotificationTypes",
			Handler:    _NotificationService_InsertSelectedNotificationTypes_Handler,
		},
		{
			MethodName: "UpdateSelectedNotificationTypes",
			Handler:    _NotificationService_UpdateSelectedNotificationTypes_Handler,
		},
		{
			MethodName: "DeleteSelectedNotificationTypes",
			Handler:    _NotificationService_DeleteSelectedNotificationTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification_service/notification_service.proto",
}
